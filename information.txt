안녕하십니까 교수님 6팀의 정대규, 박도훈, 강창민, 강보석 입니다.
저희가 구현한 프로젝트는 영화 추천 웹페이지 입니다.
저희는 전체 프로젝트 기능을 두가지 파일로 나누어 구현했습니다.

먼저, elasticsearch에 사전 데이터파일을 만들어 저장하는 부분입니다.
(쉘 스크립트를) 실행하면 네이버 영화 전체 평점 순위 2000등까지의 정보를 크롤링 합니다.
영화 제목, 감독, 배우, 장르, 스토리를 크롤링 하여 elasticsearch에 저장합니다.

그리고 다음으로는 실제로 검색어를 입력해 영화를 선택하고, 분석 결과를 출력하는 부분입니다. 
(쉘 스크립트를) 실행하고 난 후 app.py 가 실행되면 웹 페이지에서 http://127.0.0.1:5000 으로 이동하면 Homepage가 나옵니다.
원하시는 영화 제목을 입력하고 엔터를 누르면 네이버 api에 검색 결과를 요청하여 검색어와 가장 유사한 영화 10개를 출력합니다.
10개의 영화 중 원하는 영화의 라디오 버튼을 체크하고, 페이지 아래쪽의 '배우, 감독, 장르가 비슷한 영화 찾기' 또는 '줄거리가 비슷한 영화 찾기' 버튼을 선택합니다.
'배우, 감독, 장르가 비슷한 영화 찾기'를 누를시, "배우, 감독, 장르"를 CountVecterizer 형식으로 벡터화하고, 이 벡터값에 대한 Cosine 유사도를 계산한 뒤 상위 10등의 영화 정보를 출력합니다.
'줄거리가 비슷한 영화 찾기'를 누를시, 줄거리를 TfidfVecterizer 형식으로 벡터화하고, 이에 대한 Cosine 유사도를 계산한 뒤, 상위 10등의 영화 정보를 출력합니다.

시간이 가장 많이 소요되는 분석을 위한 사전 파일 생성은 크롤링을 통해 elasticsearch에 저장하여 매번 다시 크롤링을 하지 않게 하여 실행 시간을 줄였습니다.
Naver API를 호출하는 검색 시스템을 구현해 기존 url 입력방식에 비해 사용자 접근성을 높였습니다.
선택지가 적은 배우, 감독, 장르 중심의 추천에선 CountVecterizer를 사용하고, 핵심 단어의 가중치가 필요한 줄거리엔 TfidfVecterizer를 사용해 두가지 옵션을 제공하여 선택지를 늘였습니다.

읽어주셔서 감사합니다.
